// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stockpile.API.Data;

namespace Stockpile.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190828135919_ExtendedUserClass")]
    partial class ExtendedUserClass
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Stockpile.API.Models.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("ItemBrand");

                    b.Property<string>("ItemColor");

                    b.Property<string>("ItemDescription");

                    b.Property<string>("ItemName");

                    b.Property<string>("ItemPlatform");

                    b.Property<int>("ItemQty");

                    b.Property<string>("ItemSize");

                    b.Property<int>("UserId");

                    b.Property<bool>("isNew");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Stockpile.API.Models.ItemPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Description");

                    b.Property<int?>("InventoryId");

                    b.Property<string>("Url");

                    b.Property<int>("UserId");

                    b.Property<bool>("isMain");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("UserId");

                    b.ToTable("ItemPhoto");
                });

            modelBuilder.Entity("Stockpile.API.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Description");

                    b.Property<string>("Url");

                    b.Property<int>("UserId");

                    b.Property<bool>("isMain");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("Stockpile.API.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Price");

                    b.Property<int>("SubcriptionDuration");

                    b.Property<string>("SubcriptionName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("Stockpile.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountAge");

                    b.Property<DateTime>("AccountCreated");

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<DateTime>("LastActive");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Phone");

                    b.Property<string>("Platforms");

                    b.Property<string>("Username");

                    b.Property<string>("ZipCode");

                    b.Property<bool>("isActive");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Stockpile.API.Models.Value", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Values");
                });

            modelBuilder.Entity("Stockpile.API.Models.Inventory", b =>
                {
                    b.HasOne("Stockpile.API.Models.User", "User")
                        .WithMany("Items")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stockpile.API.Models.ItemPhoto", b =>
                {
                    b.HasOne("Stockpile.API.Models.Inventory")
                        .WithMany("ItemPhotos")
                        .HasForeignKey("InventoryId");

                    b.HasOne("Stockpile.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stockpile.API.Models.Photo", b =>
                {
                    b.HasOne("Stockpile.API.Models.User", "User")
                        .WithMany("Photo")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Stockpile.API.Models.Subscription", b =>
                {
                    b.HasOne("Stockpile.API.Models.User", "User")
                        .WithOne("SubscriptionType")
                        .HasForeignKey("Stockpile.API.Models.Subscription", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
